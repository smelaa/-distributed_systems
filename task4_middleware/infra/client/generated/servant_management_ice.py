# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `servant_management.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module ServantManagement
_M_ServantManagement = Ice.openModule('ServantManagement')
__name__ = 'ServantManagement'

if 'CalculationType' not in _M_ServantManagement.__dict__:
    _M_ServantManagement.CalculationType = Ice.createTempClass()
    class CalculationType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    CalculationType.sum = CalculationType("sum", 0)
    CalculationType.sumdis = CalculationType("sumdis", 1)
    CalculationType._enumerators = { 0:CalculationType.sum, 1:CalculationType.sumdis }

    _M_ServantManagement._t_CalculationType = IcePy.defineEnum('::ServantManagement::CalculationType', CalculationType, (), CalculationType._enumerators)

    _M_ServantManagement.CalculationType = CalculationType
    del CalculationType

_M_ServantManagement._t_IBigDataObject = IcePy.defineValue('::ServantManagement::IBigDataObject', Ice.Value, -1, (), False, True, None, ())

if 'IBigDataObjectPrx' not in _M_ServantManagement.__dict__:
    _M_ServantManagement.IBigDataObjectPrx = Ice.createTempClass()
    class IBigDataObjectPrx(Ice.ObjectPrx):

        def calculateOnBigData(self, calculationType, context=None):
            return _M_ServantManagement.IBigDataObject._op_calculateOnBigData.invoke(self, ((calculationType, ), context))

        def calculateOnBigDataAsync(self, calculationType, context=None):
            return _M_ServantManagement.IBigDataObject._op_calculateOnBigData.invokeAsync(self, ((calculationType, ), context))

        def begin_calculateOnBigData(self, calculationType, _response=None, _ex=None, _sent=None, context=None):
            return _M_ServantManagement.IBigDataObject._op_calculateOnBigData.begin(self, ((calculationType, ), _response, _ex, _sent, context))

        def end_calculateOnBigData(self, _r):
            return _M_ServantManagement.IBigDataObject._op_calculateOnBigData.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_ServantManagement.IBigDataObjectPrx.ice_checkedCast(proxy, '::ServantManagement::IBigDataObject', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_ServantManagement.IBigDataObjectPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::ServantManagement::IBigDataObject'
    _M_ServantManagement._t_IBigDataObjectPrx = IcePy.defineProxy('::ServantManagement::IBigDataObject', IBigDataObjectPrx)

    _M_ServantManagement.IBigDataObjectPrx = IBigDataObjectPrx
    del IBigDataObjectPrx

    _M_ServantManagement.IBigDataObject = Ice.createTempClass()
    class IBigDataObject(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::ServantManagement::IBigDataObject')

        def ice_id(self, current=None):
            return '::ServantManagement::IBigDataObject'

        @staticmethod
        def ice_staticId():
            return '::ServantManagement::IBigDataObject'

        def calculateOnBigData(self, calculationType, current=None):
            raise NotImplementedError("servant method 'calculateOnBigData' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_ServantManagement._t_IBigDataObjectDisp)

        __repr__ = __str__

    _M_ServantManagement._t_IBigDataObjectDisp = IcePy.defineClass('::ServantManagement::IBigDataObject', IBigDataObject, (), None, ())
    IBigDataObject._ice_type = _M_ServantManagement._t_IBigDataObjectDisp

    IBigDataObject._op_calculateOnBigData = IcePy.Operation('calculateOnBigData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_ServantManagement._t_CalculationType, False, 0),), (), ((), IcePy._t_int, False, 0), ())

    _M_ServantManagement.IBigDataObject = IBigDataObject
    del IBigDataObject

_M_ServantManagement._t_ISimpleObject = IcePy.defineValue('::ServantManagement::ISimpleObject', Ice.Value, -1, (), False, True, None, ())

if 'ISimpleObjectPrx' not in _M_ServantManagement.__dict__:
    _M_ServantManagement.ISimpleObjectPrx = Ice.createTempClass()
    class ISimpleObjectPrx(Ice.ObjectPrx):

        def getBornTime(self, context=None):
            return _M_ServantManagement.ISimpleObject._op_getBornTime.invoke(self, ((), context))

        def getBornTimeAsync(self, context=None):
            return _M_ServantManagement.ISimpleObject._op_getBornTime.invokeAsync(self, ((), context))

        def begin_getBornTime(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_ServantManagement.ISimpleObject._op_getBornTime.begin(self, ((), _response, _ex, _sent, context))

        def end_getBornTime(self, _r):
            return _M_ServantManagement.ISimpleObject._op_getBornTime.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_ServantManagement.ISimpleObjectPrx.ice_checkedCast(proxy, '::ServantManagement::ISimpleObject', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_ServantManagement.ISimpleObjectPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::ServantManagement::ISimpleObject'
    _M_ServantManagement._t_ISimpleObjectPrx = IcePy.defineProxy('::ServantManagement::ISimpleObject', ISimpleObjectPrx)

    _M_ServantManagement.ISimpleObjectPrx = ISimpleObjectPrx
    del ISimpleObjectPrx

    _M_ServantManagement.ISimpleObject = Ice.createTempClass()
    class ISimpleObject(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::ServantManagement::ISimpleObject')

        def ice_id(self, current=None):
            return '::ServantManagement::ISimpleObject'

        @staticmethod
        def ice_staticId():
            return '::ServantManagement::ISimpleObject'

        def getBornTime(self, current=None):
            raise NotImplementedError("servant method 'getBornTime' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_ServantManagement._t_ISimpleObjectDisp)

        __repr__ = __str__

    _M_ServantManagement._t_ISimpleObjectDisp = IcePy.defineClass('::ServantManagement::ISimpleObject', ISimpleObject, (), None, ())
    ISimpleObject._ice_type = _M_ServantManagement._t_ISimpleObjectDisp

    ISimpleObject._op_getBornTime = IcePy.Operation('getBornTime', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_long, False, 0), ())

    _M_ServantManagement.ISimpleObject = ISimpleObject
    del ISimpleObject

# End of module ServantManagement
